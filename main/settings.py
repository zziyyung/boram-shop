"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import django
from django.utils.encoding import force_str
django.utils.encoding.force_text = force_str

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_*+er98^x=!ukp(pnb$y)3b0-86*+&iuu+i5ml7^9iumztmv5*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# 로깅 설정시 False

ALLOWED_HOSTS = ['*']
# 아무것도 없으면 로컬 환경
# 로깅 설정시 '*'

# Application definition

INSTALLED_APPS = [
    'main',  # 앱 이름이 맨 앞에 잇어야 admin 템플릿 적용이 잘 됨
    'customer.apps.CustomerConfig',
    'info.apps.InfoConfig',
    'login.apps.LoginConfig',
    'mypage.apps.MypageConfig',
    'django_elasticsearch_dsl',   # 엘라스틱서치 간편하게 코드 짜는(?)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rangefilter',  # 어드민페이지 커스터마이징 할 때 필요
]

ELASTICSEARCH_DSL = {
    'default': {
        'host': '34.64.181.43:9200'  # 박지영 gcp
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'novelmusic',  # 데이터베이스의 이름
        'USER': 'jiyoung',
        'PASSWORD': 'votmdnjem',
        'HOST': '35.77.242.184',  # 박지영 gcp mysql 외부 연동 (외부IP)
        'PORT': '3306'
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR/'static']

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 로그 파일 로깅
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': { # 로거에서 핸들러로 전달되는 로그 레코드에 대한 추가 제어
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'formatters': {
#         'django.server': {
#             '()': 'django.utils.log.ServerFormatter', # 뭘까
#             'format': '[{server_time}] {message}',   # 포맷 바꾸기
#             'style': '{',
#         },
#         'standard': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
#             # %(asctime)s [%(levelname)s] %(name)s: %(message)s
#         },
#     },
#     'handlers': { # handler : 로거의 각 메세지에 어떤 일이 발생하는지 결정
#         'console': {
#             'level': 'DEBUG',  # 최하단 debug부터 출력 (= 모두 출력)
#             'filters': ['require_debug_true'], # 무엇
#             'class': 'logging.StreamHandler',
#         },
#         'django.server': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'django.server',
#         },
#         'django.request': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'filters': ['require_debug_false'],
#             'class': 'django.utils.log.AdminEmailHandler'
#         },
#         'file': { # 로그파일을 어떻게 저장할지에 대한 옵션
#             'level': 'DEBUG',  #  DEBUG 단계부터 출력하기
#             'encoding': 'utf-8',  # 한글 깨지지 않게 하기
#             'filters': ['require_debug_false'],  # 디버그모드가 False일때만 작동
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': BASE_DIR / 'logs/mysite.log',  # 로그 파일들 logs 밑에 mysite.log로 생성
#             'maxBytes': 1024*1024*5,  # 한 로그파일당 최대용량 5mb까지
#             'backupCount': 5,   # 총 로그파일 갯수, 5개까지만 만들고, 초과시 기존파일을 삭제
#             'formatter': 'standard',
#         },
#     },
#     'loggers': { # logger : 로깅 시스템의 진입점, 각 로거는 처리를 위해 메세지 작성 (로거 수집기)
#         'django': {  # 각 로거에 메세지가 전달되면 메세지의 로그 수준을 로거의 로그 수준과 비교 -> handler로 전달
#             'handlers': ['mail_admins'],
#             'level': 'DEBUG',
#         },
#         'django.server': {
#             'handlers': ['django.server'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#         'my': { # my라는 로거 수집기
#             'handlers': ['file'],
#             'level': 'DEBUG',
#         },
#         'django.request': {
#             'handlers': ['console', 'file'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#     }
# }

# logstash 연결 1
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # 기존의 루트가 아닌 로거를 비활성화할지 여부.
    'handlers': {                        # handlers : 로그 레코드로 무슨 작업을 할 것인지 정의
        'logstash': {
            'level': 'DEBUG',
            'class': 'logstash.TCPLogstashHandler',
            'host': '34.64.181.43',
            'port': 9900,  # Default value: 5959
            'version': 1,  # version of logstash event schema . default value:0
            'message_type': 'django',  #' type' field in logstash message. default value : 'logstash'
            'fqdn': False , # fully qualified domain name . default value : false #
            'tags': ['django.request'], # list of tags . default : None
        },
    },
    'loggers': {                        # loggers : 처리해야 할 로그 레코드를 어떤 handler로 전달할지 정의
        'django.requests':{
            'handlers':['logstash'],    # 로그 레코드를 logstash handler로 전달
            'level': 'DEBUG',
            #'propagate': True,
        },
        'django.server':{
            'handlers':['logstash'],    # 로그 레코드를 logstash handler로 전달
            'level': 'DEBUG',
            #'propagate': True,
        },
        'book': {  # 검색어 저장하는 로거
            'handlers': ['logstash'],
            'level': 'DEBUG',
        },
        'visitor' : {
            'handlers': ['logstash'],
            'level': 'DEBUG',
        },
    },
}


# input {
#     tcp {
#     port => 5959
#     codec => json
#     }
# }
# output {
#     elasticsearch {
#         user => "elastic"
#         password => "votmdnjem"
#     }
# }

# logstash 연결 2
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {                       # handlers : 로그 레코드로 무슨 작업을 할 것인지 정의
#         'logstash': {
#             'level': 'INFO',
#             'class': 'logstash.TCPLogstashHandler',
#             'host': '34.64.189.76',
#             'port': 5959,  # Default value: 5959
#             'version': 1,
#         },
#     },
#     'loggers': {                        # loggers : 처리해야 할 로그 레코드를 어떤 handler로 전달할지 정의
#         'django': {
#             'handlers': ['logstash'],   # 로그 레코드를 logstash handler로 전달
#         },
#     },
# }

# input {
#     tcp {
#     port => 5959
#     codec => json
#     }
# }
# filer {
#     grok {
#     math => { "message" => '"(?<method>[^ ]+) .+search\w(?<search_word>[^ ]+)' }
#     }
#     urldecode { field => "search_word" }
# }
#
# output {
#     elasticsearch {
#         hosts => ["34.64.189.76:9200"]
#         user => "elastic"
#         password => "votmdnjem"
#     }
# }