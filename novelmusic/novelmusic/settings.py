"""
Django settings for novelmusic project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
# 장고 4점대 버전 text = str 문제 생겨서 해줌
import django
from django.utils.encoding import force_str
django.utils.encoding.force_text = force_str


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p=++wdaovk2%#s@mefa4(s-rp_zb=-o9hu2)@-*hzijn%^rri*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']   # 로컬은 아무것도 없고 aws 서버 사용하려면 ip주소 넣기


# Application definition

INSTALLED_APPS = [
    'novelmusic',
    'django_elasticsearch_dsl',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',    # 모듈 없으면 오류 / 다운받기 pip install djangorestframework==3.13.1   # 모듈 없으면 오류  / 다운받기 pip install django-elasticsearch-dsl==7.1.4
]
# 추가로 다운받아야 할 모듈 ( 위에 2개랑 합쳐서 총4개 (버전 잘 맞추기))
# pip install elasticsearch==7.11.0b1
# pip install elasticsearch_dsl==7.3.0
# pip install python-logstash
ELASTICSEARCH_DSL = {
    'default': {
        'host': '34.64.181.43:9200'  # aws 서버 ip로 변경
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'novelmusic.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'novelmusic.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'novelmusic',  # 데이터베이스의 이름
        'USER': 'root',
        'PASSWORD': '1234',
        'HOST': '34.64.181.43',  # aws mysql 외부 연동 (외부IP) 변경 필 !
        'PORT': '3306'
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

# 리뷰 날짜 업로드용
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/



STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR/'static']


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# 유튜브 뮤직줄떄 안되서 써본거용
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL =False
CORS_ORIGIN_WHITELIST = ['localhost','127.0.0.1']

# logstash 연결 1
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # 기존의 루트가 아닌 로거를 비활성화할지 여부.
    'handlers': {                        # handlers : 로그 레코드로 무슨 작업을 할 것인지 정의
        'logstash': {
            'level': 'DEBUG',
            'class': 'logstash.TCPLogstashHandler',
            'host': '34.64.181.43',
            'port': 9900,  # Default value: 5959
            'version': 1,  # version of logstash event schema . default value:0
            'message_type': 'django',  #' type' field in logstash message. default value : 'logstash'
            'fqdn': False , # fully qualified domain name . default value : false #
            'tags': ['django.request'], # list of tags . default : None
        },
    },
    'loggers': {                        # loggers : 처리해야 할 로그 레코드를 어떤 handler로 전달할지 정의
        'django.requests':{
            'handlers':['logstash'],    # 로그 레코드를 logstash handler로 전달
            'level': 'DEBUG',
            #'propagate': True,
        },
        'django.server':{
            'handlers':['logstash'],    # 로그 레코드를 logstash handler로 전달
            'level': 'DEBUG',
            #'propagate': True,
        },
    },
}


# 장고 로깅 파일용
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'formatters': {
#         'django.server': {
#             '()': 'django.utils.log.ServerFormatter',
#             'format': '[{server_time}] {message}',
#             'style': '{',
#         },
#         'standard': {
#             'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': 'INFO',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#         },
#         'django.server': {
#             'level': 'INFO',
#             'class': 'logging.StreamHandler',
#             'formatter': 'django.server',
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'filters': ['require_debug_false'],
#             'class': 'django.utils.log.AdminEmailHandler'
#         },
#         'file': {
#             'level': 'INFO',
#             'encoding': 'utf-8',
#             'filters': ['require_debug_false'],
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': BASE_DIR / 'logs/novelmusic.log',
#             'maxBytes': 1024*1024*5,  # 5 MB
#             'backupCount': 5,
#             'formatter': 'standard',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'mail_admins'],
#             'level': 'INFO',
#         },
#         'django.server': {
#             'handlers': ['django.server'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'my': {
#             'handlers': ['console'],
#             'level': 'INFO',
#         },
#     }
# }